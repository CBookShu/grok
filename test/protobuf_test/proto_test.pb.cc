// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test/protobuf_test/proto_test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test/protobuf_test/proto_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_test {

namespace {

const ::google::protobuf::Descriptor* Union_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Union_reflection_ = NULL;
const ::google::protobuf::Descriptor* Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* Food_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Food_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto() {
  protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test/protobuf_test/proto_test.proto");
  GOOGLE_CHECK(file != NULL);
  Union_descriptor_ = file->message_type(0);
  static const int Union_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Union, players_),
  };
  Union_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Union_descriptor_,
      Union::default_instance_,
      Union_offsets_,
      -1,
      -1,
      -1,
      sizeof(Union),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Union, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Union, _is_default_instance_));
  Player_descriptor_ = file->message_type(1);
  static const int Player_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, male_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, food_),
  };
  Player_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Player_descriptor_,
      Player::default_instance_,
      Player_offsets_,
      -1,
      -1,
      -1,
      sizeof(Player),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Player, _is_default_instance_));
  Food_descriptor_ = file->message_type(2);
  static const int Food_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, name_),
  };
  Food_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Food_descriptor_,
      Food::default_instance_,
      Food_offsets_,
      -1,
      -1,
      -1,
      sizeof(Food),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Food, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Union_descriptor_, &Union::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Player_descriptor_, &Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Food_descriptor_, &Food::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto() {
  delete Union::default_instance_;
  delete Union_reflection_;
  delete Player::default_instance_;
  delete Player_reflection_;
  delete Food::default_instance_;
  delete Food_reflection_;
}

void protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#test/protobuf_test/proto_test.proto\022\np"
    "roto_test\",\n\005Union\022#\n\007players\030\001 \003(\0132\022.pr"
    "oto_test.Player\"Q\n\006Player\022\013\n\003age\030\001 \001(\005\022\014"
    "\n\004male\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\036\n\004food\030\004 \001(\013"
    "2\020.proto_test.Food\"\024\n\004Food\022\014\n\004name\030\001 \001(\t"
    "b\006proto3", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test/protobuf_test/proto_test.proto", &protobuf_RegisterTypes);
  Union::default_instance_ = new Union();
  Player::default_instance_ = new Player();
  Food::default_instance_ = new Food();
  Union::default_instance_->InitAsDefaultInstance();
  Player::default_instance_->InitAsDefaultInstance();
  Food::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto {
  StaticDescriptorInitializer_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto() {
    protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto();
  }
} static_descriptor_initializer_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Union::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Union::Union()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_test.Union)
}

void Union::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Union::Union(const Union& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto_test.Union)
}

void Union::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Union::~Union() {
  // @@protoc_insertion_point(destructor:proto_test.Union)
  SharedDtor();
}

void Union::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Union::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Union::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Union_descriptor_;
}

const Union& Union::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto();
  return *default_instance_;
}

Union* Union::default_instance_ = NULL;

Union* Union::New(::google::protobuf::Arena* arena) const {
  Union* n = new Union;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Union::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_test.Union)
  players_.Clear();
}

bool Union::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_test.Union)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_test.Player players = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_players;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_test.Union)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_test.Union)
  return false;
#undef DO_
}

void Union::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_test.Union)
  // repeated .proto_test.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto_test.Union)
}

::google::protobuf::uint8* Union::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_test.Union)
  // repeated .proto_test.Player players = 1;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->players(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto_test.Union)
  return target;
}

int Union::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto_test.Union)
  int total_size = 0;

  // repeated .proto_test.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Union::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_test.Union)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Union* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Union>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_test.Union)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_test.Union)
    MergeFrom(*source);
  }
}

void Union::MergeFrom(const Union& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_test.Union)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  players_.MergeFrom(from.players_);
}

void Union::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_test.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Union::CopyFrom(const Union& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_test.Union)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Union::IsInitialized() const {

  return true;
}

void Union::Swap(Union* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Union::InternalSwap(Union* other) {
  players_.UnsafeArenaSwap(&other->players_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Union::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Union_descriptor_;
  metadata.reflection = Union_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Union

// repeated .proto_test.Player players = 1;
int Union::players_size() const {
  return players_.size();
}
void Union::clear_players() {
  players_.Clear();
}
const ::proto_test::Player& Union::players(int index) const {
  // @@protoc_insertion_point(field_get:proto_test.Union.players)
  return players_.Get(index);
}
::proto_test::Player* Union::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto_test.Union.players)
  return players_.Mutable(index);
}
::proto_test::Player* Union::add_players() {
  // @@protoc_insertion_point(field_add:proto_test.Union.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto_test::Player >*
Union::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto_test.Union.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto_test::Player >&
Union::players() const {
  // @@protoc_insertion_point(field_list:proto_test.Union.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Player::kAgeFieldNumber;
const int Player::kMaleFieldNumber;
const int Player::kNameFieldNumber;
const int Player::kFoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Player::Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_test.Player)
}

void Player::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  food_ = const_cast< ::proto_test::Food*>(&::proto_test::Food::default_instance());
}

Player::Player(const Player& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto_test.Player)
}

void Player::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  age_ = 0;
  male_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  food_ = NULL;
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:proto_test.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete food_;
  }
}

void Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Player_descriptor_;
}

const Player& Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto();
  return *default_instance_;
}

Player* Player::default_instance_ = NULL;

Player* Player::New(::google::protobuf::Arena* arena) const {
  Player* n = new Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_test.Player)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Player, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Player*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(age_, male_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && food_ != NULL) delete food_;
  food_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_test.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 age = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_male;
        break;
      }

      // optional int32 male = 2;
      case 2: {
        if (tag == 16) {
         parse_male:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &male_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_test.Player.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_food;
        break;
      }

      // optional .proto_test.Food food = 4;
      case 4: {
        if (tag == 34) {
         parse_food:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_test.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_test.Player)
  return false;
#undef DO_
}

void Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_test.Player)
  // optional int32 age = 1;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->age(), output);
  }

  // optional int32 male = 2;
  if (this->male() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->male(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_test.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .proto_test.Food food = 4;
  if (this->has_food()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->food_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto_test.Player)
}

::google::protobuf::uint8* Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_test.Player)
  // optional int32 age = 1;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->age(), target);
  }

  // optional int32 male = 2;
  if (this->male() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->male(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_test.Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .proto_test.Food food = 4;
  if (this->has_food()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->food_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto_test.Player)
  return target;
}

int Player::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto_test.Player)
  int total_size = 0;

  // optional int32 age = 1;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // optional int32 male = 2;
  if (this->male() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->male());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .proto_test.Food food = 4;
  if (this->has_food()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->food_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_test.Player)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Player* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_test.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_test.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_test.Player)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.male() != 0) {
    set_male(from.male());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_food()) {
    mutable_food()->::proto_test::Food::MergeFrom(from.food());
  }
}

void Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_test.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_test.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {

  return true;
}

void Player::Swap(Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Player::InternalSwap(Player* other) {
  std::swap(age_, other->age_);
  std::swap(male_, other->male_);
  name_.Swap(&other->name_);
  std::swap(food_, other->food_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Player_descriptor_;
  metadata.reflection = Player_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Player

// optional int32 age = 1;
void Player::clear_age() {
  age_ = 0;
}
 ::google::protobuf::int32 Player::age() const {
  // @@protoc_insertion_point(field_get:proto_test.Player.age)
  return age_;
}
 void Player::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:proto_test.Player.age)
}

// optional int32 male = 2;
void Player::clear_male() {
  male_ = 0;
}
 ::google::protobuf::int32 Player::male() const {
  // @@protoc_insertion_point(field_get:proto_test.Player.male)
  return male_;
}
 void Player::set_male(::google::protobuf::int32 value) {
  
  male_ = value;
  // @@protoc_insertion_point(field_set:proto_test.Player.male)
}

// optional string name = 3;
void Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:proto_test.Player.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_test.Player.name)
}
 void Player::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_test.Player.name)
}
 void Player::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_test.Player.name)
}
 ::std::string* Player::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto_test.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:proto_test.Player.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto_test.Player.name)
}

// optional .proto_test.Food food = 4;
bool Player::has_food() const {
  return !_is_default_instance_ && food_ != NULL;
}
void Player::clear_food() {
  if (GetArenaNoVirtual() == NULL && food_ != NULL) delete food_;
  food_ = NULL;
}
const ::proto_test::Food& Player::food() const {
  // @@protoc_insertion_point(field_get:proto_test.Player.food)
  return food_ != NULL ? *food_ : *default_instance_->food_;
}
::proto_test::Food* Player::mutable_food() {
  
  if (food_ == NULL) {
    food_ = new ::proto_test::Food;
  }
  // @@protoc_insertion_point(field_mutable:proto_test.Player.food)
  return food_;
}
::proto_test::Food* Player::release_food() {
  // @@protoc_insertion_point(field_release:proto_test.Player.food)
  
  ::proto_test::Food* temp = food_;
  food_ = NULL;
  return temp;
}
void Player::set_allocated_food(::proto_test::Food* food) {
  delete food_;
  food_ = food;
  if (food) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto_test.Player.food)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Food::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Food::Food()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_test.Food)
}

void Food::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Food::Food(const Food& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto_test.Food)
}

void Food::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Food::~Food() {
  // @@protoc_insertion_point(destructor:proto_test.Food)
  SharedDtor();
}

void Food::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Food::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Food::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Food_descriptor_;
}

const Food& Food::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2fprotobuf_5ftest_2fproto_5ftest_2eproto();
  return *default_instance_;
}

Food* Food::default_instance_ = NULL;

Food* Food::New(::google::protobuf::Arena* arena) const {
  Food* n = new Food;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Food::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_test.Food)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Food::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_test.Food)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto_test.Food.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_test.Food)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_test.Food)
  return false;
#undef DO_
}

void Food::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_test.Food)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_test.Food.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto_test.Food)
}

::google::protobuf::uint8* Food::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_test.Food)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto_test.Food.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto_test.Food)
  return target;
}

int Food::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:proto_test.Food)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Food::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_test.Food)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Food* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Food>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_test.Food)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_test.Food)
    MergeFrom(*source);
  }
}

void Food::MergeFrom(const Food& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_test.Food)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Food::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_test.Food)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Food::CopyFrom(const Food& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_test.Food)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Food::IsInitialized() const {

  return true;
}

void Food::Swap(Food* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Food::InternalSwap(Food* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Food::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Food_descriptor_;
  metadata.reflection = Food_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Food

// optional string name = 1;
void Food::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Food::name() const {
  // @@protoc_insertion_point(field_get:proto_test.Food.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Food::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto_test.Food.name)
}
 void Food::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto_test.Food.name)
}
 void Food::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto_test.Food.name)
}
 ::std::string* Food::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto_test.Food.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Food::release_name() {
  // @@protoc_insertion_point(field_release:proto_test.Food.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Food::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto_test.Food.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_test

// @@protoc_insertion_point(global_scope)
