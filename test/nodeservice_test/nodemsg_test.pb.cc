// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodemsg_test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nodemsg_test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nodemsg_test {

namespace {

const ::google::protobuf::Descriptor* TestReq1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestReq1_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestRsp1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestRsp1_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nodemsg_5ftest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_nodemsg_5ftest_2eproto() {
  protobuf_AddDesc_nodemsg_5ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nodemsg_test.proto");
  GOOGLE_CHECK(file != NULL);
  TestReq1_descriptor_ = file->message_type(0);
  static const int TestReq1_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq1, req_),
  };
  TestReq1_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestReq1_descriptor_,
      TestReq1::default_instance_,
      TestReq1_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestReq1),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq1, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestReq1, _is_default_instance_));
  TestRsp1_descriptor_ = file->message_type(1);
  static const int TestRsp1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp1, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp1, rsp_),
  };
  TestRsp1_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestRsp1_descriptor_,
      TestRsp1::default_instance_,
      TestRsp1_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestRsp1),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp1, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRsp1, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nodemsg_5ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestReq1_descriptor_, &TestReq1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestRsp1_descriptor_, &TestRsp1::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nodemsg_5ftest_2eproto() {
  delete TestReq1::default_instance_;
  delete TestReq1_reflection_;
  delete TestRsp1::default_instance_;
  delete TestRsp1_reflection_;
}

void protobuf_AddDesc_nodemsg_5ftest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_nodemsg_5ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022nodemsg_test.proto\022\014nodemsg_test\"\027\n\010Te"
    "stReq1\022\013\n\003req\030\001 \001(\t\"\'\n\010TestRsp1\022\016\n\006statu"
    "s\030\001 \001(\005\022\013\n\003rsp\030\002 \001(\tb\006proto3", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nodemsg_test.proto", &protobuf_RegisterTypes);
  TestReq1::default_instance_ = new TestReq1();
  TestRsp1::default_instance_ = new TestRsp1();
  TestReq1::default_instance_->InitAsDefaultInstance();
  TestRsp1::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nodemsg_5ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nodemsg_5ftest_2eproto {
  StaticDescriptorInitializer_nodemsg_5ftest_2eproto() {
    protobuf_AddDesc_nodemsg_5ftest_2eproto();
  }
} static_descriptor_initializer_nodemsg_5ftest_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestReq1::kReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestReq1::TestReq1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodemsg_test.TestReq1)
}

void TestReq1::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestReq1::TestReq1(const TestReq1& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nodemsg_test.TestReq1)
}

void TestReq1::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  req_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TestReq1::~TestReq1() {
  // @@protoc_insertion_point(destructor:nodemsg_test.TestReq1)
  SharedDtor();
}

void TestReq1::SharedDtor() {
  req_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestReq1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestReq1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestReq1_descriptor_;
}

const TestReq1& TestReq1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodemsg_5ftest_2eproto();
  return *default_instance_;
}

TestReq1* TestReq1::default_instance_ = NULL;

TestReq1* TestReq1::New(::google::protobuf::Arena* arena) const {
  TestReq1* n = new TestReq1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestReq1::Clear() {
// @@protoc_insertion_point(message_clear_start:nodemsg_test.TestReq1)
  req_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TestReq1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodemsg_test.TestReq1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string req = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->req().data(), this->req().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nodemsg_test.TestReq1.req"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nodemsg_test.TestReq1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodemsg_test.TestReq1)
  return false;
#undef DO_
}

void TestReq1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodemsg_test.TestReq1)
  // optional string req = 1;
  if (this->req().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req().data(), this->req().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodemsg_test.TestReq1.req");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->req(), output);
  }

  // @@protoc_insertion_point(serialize_end:nodemsg_test.TestReq1)
}

::google::protobuf::uint8* TestReq1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nodemsg_test.TestReq1)
  // optional string req = 1;
  if (this->req().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->req().data(), this->req().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodemsg_test.TestReq1.req");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nodemsg_test.TestReq1)
  return target;
}

int TestReq1::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nodemsg_test.TestReq1)
  int total_size = 0;

  // optional string req = 1;
  if (this->req().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->req());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestReq1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodemsg_test.TestReq1)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestReq1* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestReq1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodemsg_test.TestReq1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodemsg_test.TestReq1)
    MergeFrom(*source);
  }
}

void TestReq1::MergeFrom(const TestReq1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodemsg_test.TestReq1)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.req().size() > 0) {

    req_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.req_);
  }
}

void TestReq1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodemsg_test.TestReq1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestReq1::CopyFrom(const TestReq1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodemsg_test.TestReq1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestReq1::IsInitialized() const {

  return true;
}

void TestReq1::Swap(TestReq1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestReq1::InternalSwap(TestReq1* other) {
  req_.Swap(&other->req_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestReq1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestReq1_descriptor_;
  metadata.reflection = TestReq1_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestReq1

// optional string req = 1;
void TestReq1::clear_req() {
  req_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestReq1::req() const {
  // @@protoc_insertion_point(field_get:nodemsg_test.TestReq1.req)
  return req_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestReq1::set_req(const ::std::string& value) {
  
  req_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodemsg_test.TestReq1.req)
}
 void TestReq1::set_req(const char* value) {
  
  req_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodemsg_test.TestReq1.req)
}
 void TestReq1::set_req(const char* value, size_t size) {
  
  req_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodemsg_test.TestReq1.req)
}
 ::std::string* TestReq1::mutable_req() {
  
  // @@protoc_insertion_point(field_mutable:nodemsg_test.TestReq1.req)
  return req_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestReq1::release_req() {
  // @@protoc_insertion_point(field_release:nodemsg_test.TestReq1.req)
  
  return req_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestReq1::set_allocated_req(::std::string* req) {
  if (req != NULL) {
    
  } else {
    
  }
  req_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req);
  // @@protoc_insertion_point(field_set_allocated:nodemsg_test.TestReq1.req)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRsp1::kStatusFieldNumber;
const int TestRsp1::kRspFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRsp1::TestRsp1()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodemsg_test.TestRsp1)
}

void TestRsp1::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestRsp1::TestRsp1(const TestRsp1& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nodemsg_test.TestRsp1)
}

void TestRsp1::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  rsp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TestRsp1::~TestRsp1() {
  // @@protoc_insertion_point(destructor:nodemsg_test.TestRsp1)
  SharedDtor();
}

void TestRsp1::SharedDtor() {
  rsp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestRsp1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRsp1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestRsp1_descriptor_;
}

const TestRsp1& TestRsp1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodemsg_5ftest_2eproto();
  return *default_instance_;
}

TestRsp1* TestRsp1::default_instance_ = NULL;

TestRsp1* TestRsp1::New(::google::protobuf::Arena* arena) const {
  TestRsp1* n = new TestRsp1;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestRsp1::Clear() {
// @@protoc_insertion_point(message_clear_start:nodemsg_test.TestRsp1)
  status_ = 0;
  rsp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TestRsp1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodemsg_test.TestRsp1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rsp;
        break;
      }

      // optional string rsp = 2;
      case 2: {
        if (tag == 18) {
         parse_rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsp().data(), this->rsp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nodemsg_test.TestRsp1.rsp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nodemsg_test.TestRsp1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodemsg_test.TestRsp1)
  return false;
#undef DO_
}

void TestRsp1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodemsg_test.TestRsp1)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional string rsp = 2;
  if (this->rsp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsp().data(), this->rsp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodemsg_test.TestRsp1.rsp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rsp(), output);
  }

  // @@protoc_insertion_point(serialize_end:nodemsg_test.TestRsp1)
}

::google::protobuf::uint8* TestRsp1::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nodemsg_test.TestRsp1)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional string rsp = 2;
  if (this->rsp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsp().data(), this->rsp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodemsg_test.TestRsp1.rsp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rsp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nodemsg_test.TestRsp1)
  return target;
}

int TestRsp1::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nodemsg_test.TestRsp1)
  int total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional string rsp = 2;
  if (this->rsp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRsp1::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodemsg_test.TestRsp1)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestRsp1* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestRsp1>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodemsg_test.TestRsp1)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodemsg_test.TestRsp1)
    MergeFrom(*source);
  }
}

void TestRsp1::MergeFrom(const TestRsp1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodemsg_test.TestRsp1)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.rsp().size() > 0) {

    rsp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsp_);
  }
}

void TestRsp1::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodemsg_test.TestRsp1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRsp1::CopyFrom(const TestRsp1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodemsg_test.TestRsp1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRsp1::IsInitialized() const {

  return true;
}

void TestRsp1::Swap(TestRsp1* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRsp1::InternalSwap(TestRsp1* other) {
  std::swap(status_, other->status_);
  rsp_.Swap(&other->rsp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestRsp1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestRsp1_descriptor_;
  metadata.reflection = TestRsp1_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestRsp1

// optional int32 status = 1;
void TestRsp1::clear_status() {
  status_ = 0;
}
 ::google::protobuf::int32 TestRsp1::status() const {
  // @@protoc_insertion_point(field_get:nodemsg_test.TestRsp1.status)
  return status_;
}
 void TestRsp1::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:nodemsg_test.TestRsp1.status)
}

// optional string rsp = 2;
void TestRsp1::clear_rsp() {
  rsp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestRsp1::rsp() const {
  // @@protoc_insertion_point(field_get:nodemsg_test.TestRsp1.rsp)
  return rsp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestRsp1::set_rsp(const ::std::string& value) {
  
  rsp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodemsg_test.TestRsp1.rsp)
}
 void TestRsp1::set_rsp(const char* value) {
  
  rsp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodemsg_test.TestRsp1.rsp)
}
 void TestRsp1::set_rsp(const char* value, size_t size) {
  
  rsp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodemsg_test.TestRsp1.rsp)
}
 ::std::string* TestRsp1::mutable_rsp() {
  
  // @@protoc_insertion_point(field_mutable:nodemsg_test.TestRsp1.rsp)
  return rsp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestRsp1::release_rsp() {
  // @@protoc_insertion_point(field_release:nodemsg_test.TestRsp1.rsp)
  
  return rsp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestRsp1::set_allocated_rsp(::std::string* rsp) {
  if (rsp != NULL) {
    
  } else {
    
  }
  rsp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp);
  // @@protoc_insertion_point(field_set_allocated:nodemsg_test.TestRsp1.rsp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nodemsg_test

// @@protoc_insertion_point(global_scope)
