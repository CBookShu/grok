// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nodeService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nodeService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nodeService {

namespace {

const ::google::protobuf::Descriptor* ReqNodeRegistor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqNodeRegistor_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspNodeRegistor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspNodeRegistor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RegistorResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_nodeService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_nodeService_2eproto() {
  protobuf_AddDesc_nodeService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nodeService.proto");
  GOOGLE_CHECK(file != NULL);
  ReqNodeRegistor_descriptor_ = file->message_type(0);
  static const int ReqNodeRegistor_offsets_[1] = {
  };
  ReqNodeRegistor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqNodeRegistor_descriptor_,
      ReqNodeRegistor::default_instance_,
      ReqNodeRegistor_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReqNodeRegistor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNodeRegistor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqNodeRegistor, _is_default_instance_));
  RspNodeRegistor_descriptor_ = file->message_type(1);
  static const int RspNodeRegistor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNodeRegistor, status_),
  };
  RspNodeRegistor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RspNodeRegistor_descriptor_,
      RspNodeRegistor::default_instance_,
      RspNodeRegistor_offsets_,
      -1,
      -1,
      -1,
      sizeof(RspNodeRegistor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNodeRegistor, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspNodeRegistor, _is_default_instance_));
  MsgPack_descriptor_ = file->message_type(2);
  static const int MsgPack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, msgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, pbdata_),
  };
  MsgPack_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgPack_descriptor_,
      MsgPack::default_instance_,
      MsgPack_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgPack),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPack, _is_default_instance_));
  RegistorResultType_descriptor_ = file->enum_type(0);
  MsgType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nodeService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqNodeRegistor_descriptor_, &ReqNodeRegistor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RspNodeRegistor_descriptor_, &RspNodeRegistor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgPack_descriptor_, &MsgPack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nodeService_2eproto() {
  delete ReqNodeRegistor::default_instance_;
  delete ReqNodeRegistor_reflection_;
  delete RspNodeRegistor::default_instance_;
  delete RspNodeRegistor_reflection_;
  delete MsgPack::default_instance_;
  delete MsgPack_reflection_;
}

void protobuf_AddDesc_nodeService_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_nodeService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021nodeService.proto\022\013nodeService\"\021\n\017ReqN"
    "odeRegistor\"B\n\017RspNodeRegistor\022/\n\006status"
    "\030\001 \001(\0162\037.nodeService.RegistorResultType\""
    "\202\001\n\007MsgPack\022\016\n\006source\030\001 \001(\t\022\014\n\004dest\030\002 \001("
    "\t\022\017\n\007msgname\030\003 \001(\t\022%\n\007msgtype\030\004 \001(\0162\024.no"
    "deService.MsgType\022\021\n\tsessionid\030\005 \001(\r\022\016\n\006"
    "pbdata\030\006 \001(\014*>\n\022RegistorResultType\022\020\n\014eR"
    "egister_OK\020\000\022\026\n\022eRegister_ParamErr\020\001*N\n\007"
    "MsgType\022\r\n\teMsg_none\020\000\022\020\n\014eMsg_request\020\001"
    "\022\021\n\reMsg_response\020\002\022\017\n\013eMsg_notify\020\003b\006pr"
    "oto3", 404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nodeService.proto", &protobuf_RegisterTypes);
  ReqNodeRegistor::default_instance_ = new ReqNodeRegistor();
  RspNodeRegistor::default_instance_ = new RspNodeRegistor();
  MsgPack::default_instance_ = new MsgPack();
  ReqNodeRegistor::default_instance_->InitAsDefaultInstance();
  RspNodeRegistor::default_instance_->InitAsDefaultInstance();
  MsgPack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nodeService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nodeService_2eproto {
  StaticDescriptorInitializer_nodeService_2eproto() {
    protobuf_AddDesc_nodeService_2eproto();
  }
} static_descriptor_initializer_nodeService_2eproto_;
const ::google::protobuf::EnumDescriptor* RegistorResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistorResultType_descriptor_;
}
bool RegistorResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqNodeRegistor::ReqNodeRegistor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodeService.ReqNodeRegistor)
}

void ReqNodeRegistor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReqNodeRegistor::ReqNodeRegistor(const ReqNodeRegistor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nodeService.ReqNodeRegistor)
}

void ReqNodeRegistor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ReqNodeRegistor::~ReqNodeRegistor() {
  // @@protoc_insertion_point(destructor:nodeService.ReqNodeRegistor)
  SharedDtor();
}

void ReqNodeRegistor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqNodeRegistor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqNodeRegistor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqNodeRegistor_descriptor_;
}

const ReqNodeRegistor& ReqNodeRegistor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeService_2eproto();
  return *default_instance_;
}

ReqNodeRegistor* ReqNodeRegistor::default_instance_ = NULL;

ReqNodeRegistor* ReqNodeRegistor::New(::google::protobuf::Arena* arena) const {
  ReqNodeRegistor* n = new ReqNodeRegistor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqNodeRegistor::Clear() {
// @@protoc_insertion_point(message_clear_start:nodeService.ReqNodeRegistor)
}

bool ReqNodeRegistor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodeService.ReqNodeRegistor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:nodeService.ReqNodeRegistor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodeService.ReqNodeRegistor)
  return false;
#undef DO_
}

void ReqNodeRegistor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodeService.ReqNodeRegistor)
  // @@protoc_insertion_point(serialize_end:nodeService.ReqNodeRegistor)
}

::google::protobuf::uint8* ReqNodeRegistor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nodeService.ReqNodeRegistor)
  // @@protoc_insertion_point(serialize_to_array_end:nodeService.ReqNodeRegistor)
  return target;
}

int ReqNodeRegistor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nodeService.ReqNodeRegistor)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqNodeRegistor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodeService.ReqNodeRegistor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqNodeRegistor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqNodeRegistor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodeService.ReqNodeRegistor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodeService.ReqNodeRegistor)
    MergeFrom(*source);
  }
}

void ReqNodeRegistor::MergeFrom(const ReqNodeRegistor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodeService.ReqNodeRegistor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void ReqNodeRegistor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodeService.ReqNodeRegistor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqNodeRegistor::CopyFrom(const ReqNodeRegistor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodeService.ReqNodeRegistor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqNodeRegistor::IsInitialized() const {

  return true;
}

void ReqNodeRegistor::Swap(ReqNodeRegistor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqNodeRegistor::InternalSwap(ReqNodeRegistor* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqNodeRegistor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqNodeRegistor_descriptor_;
  metadata.reflection = ReqNodeRegistor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqNodeRegistor

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RspNodeRegistor::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RspNodeRegistor::RspNodeRegistor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodeService.RspNodeRegistor)
}

void RspNodeRegistor::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RspNodeRegistor::RspNodeRegistor(const RspNodeRegistor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nodeService.RspNodeRegistor)
}

void RspNodeRegistor::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = 0;
}

RspNodeRegistor::~RspNodeRegistor() {
  // @@protoc_insertion_point(destructor:nodeService.RspNodeRegistor)
  SharedDtor();
}

void RspNodeRegistor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspNodeRegistor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspNodeRegistor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspNodeRegistor_descriptor_;
}

const RspNodeRegistor& RspNodeRegistor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeService_2eproto();
  return *default_instance_;
}

RspNodeRegistor* RspNodeRegistor::default_instance_ = NULL;

RspNodeRegistor* RspNodeRegistor::New(::google::protobuf::Arena* arena) const {
  RspNodeRegistor* n = new RspNodeRegistor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspNodeRegistor::Clear() {
// @@protoc_insertion_point(message_clear_start:nodeService.RspNodeRegistor)
  status_ = 0;
}

bool RspNodeRegistor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodeService.RspNodeRegistor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .nodeService.RegistorResultType status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::nodeService::RegistorResultType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nodeService.RspNodeRegistor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodeService.RspNodeRegistor)
  return false;
#undef DO_
}

void RspNodeRegistor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodeService.RspNodeRegistor)
  // optional .nodeService.RegistorResultType status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:nodeService.RspNodeRegistor)
}

::google::protobuf::uint8* RspNodeRegistor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nodeService.RspNodeRegistor)
  // optional .nodeService.RegistorResultType status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nodeService.RspNodeRegistor)
  return target;
}

int RspNodeRegistor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nodeService.RspNodeRegistor)
  int total_size = 0;

  // optional .nodeService.RegistorResultType status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspNodeRegistor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodeService.RspNodeRegistor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RspNodeRegistor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RspNodeRegistor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodeService.RspNodeRegistor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodeService.RspNodeRegistor)
    MergeFrom(*source);
  }
}

void RspNodeRegistor::MergeFrom(const RspNodeRegistor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodeService.RspNodeRegistor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void RspNodeRegistor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodeService.RspNodeRegistor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspNodeRegistor::CopyFrom(const RspNodeRegistor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodeService.RspNodeRegistor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspNodeRegistor::IsInitialized() const {

  return true;
}

void RspNodeRegistor::Swap(RspNodeRegistor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspNodeRegistor::InternalSwap(RspNodeRegistor* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspNodeRegistor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspNodeRegistor_descriptor_;
  metadata.reflection = RspNodeRegistor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspNodeRegistor

// optional .nodeService.RegistorResultType status = 1;
void RspNodeRegistor::clear_status() {
  status_ = 0;
}
 ::nodeService::RegistorResultType RspNodeRegistor::status() const {
  // @@protoc_insertion_point(field_get:nodeService.RspNodeRegistor.status)
  return static_cast< ::nodeService::RegistorResultType >(status_);
}
 void RspNodeRegistor::set_status(::nodeService::RegistorResultType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:nodeService.RspNodeRegistor.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgPack::kSourceFieldNumber;
const int MsgPack::kDestFieldNumber;
const int MsgPack::kMsgnameFieldNumber;
const int MsgPack::kMsgtypeFieldNumber;
const int MsgPack::kSessionidFieldNumber;
const int MsgPack::kPbdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgPack::MsgPack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nodeService.MsgPack)
}

void MsgPack::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgPack::MsgPack(const MsgPack& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nodeService.MsgPack)
}

void MsgPack::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  sessionid_ = 0u;
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgPack::~MsgPack() {
  // @@protoc_insertion_point(destructor:nodeService.MsgPack)
  SharedDtor();
}

void MsgPack::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgPack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgPack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPack_descriptor_;
}

const MsgPack& MsgPack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nodeService_2eproto();
  return *default_instance_;
}

MsgPack* MsgPack::default_instance_ = NULL;

MsgPack* MsgPack::New(::google::protobuf::Arena* arena) const {
  MsgPack* n = new MsgPack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgPack::Clear() {
// @@protoc_insertion_point(message_clear_start:nodeService.MsgPack)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgPack, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgPack*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgtype_, sessionid_);
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MsgPack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nodeService.MsgPack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string source = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nodeService.MsgPack.source"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // optional string dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nodeService.MsgPack.dest"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgname;
        break;
      }

      // optional string msgname = 3;
      case 3: {
        if (tag == 26) {
         parse_msgname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msgname().data(), this->msgname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "nodeService.MsgPack.msgname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgtype;
        break;
      }

      // optional .nodeService.MsgType msgtype = 4;
      case 4: {
        if (tag == 32) {
         parse_msgtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::nodeService::MsgType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 5;
      case 5: {
        if (tag == 40) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pbdata;
        break;
      }

      // optional bytes pbdata = 6;
      case 6: {
        if (tag == 50) {
         parse_pbdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nodeService.MsgPack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nodeService.MsgPack)
  return false;
#undef DO_
}

void MsgPack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nodeService.MsgPack)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodeService.MsgPack.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // optional string dest = 2;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodeService.MsgPack.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // optional string msgname = 3;
  if (this->msgname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodeService.MsgPack.msgname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msgname(), output);
  }

  // optional .nodeService.MsgType msgtype = 4;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msgtype(), output);
  }

  // optional uint32 sessionid = 5;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sessionid(), output);
  }

  // optional bytes pbdata = 6;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->pbdata(), output);
  }

  // @@protoc_insertion_point(serialize_end:nodeService.MsgPack)
}

::google::protobuf::uint8* MsgPack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nodeService.MsgPack)
  // optional string source = 1;
  if (this->source().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodeService.MsgPack.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // optional string dest = 2;
  if (this->dest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodeService.MsgPack.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // optional string msgname = 3;
  if (this->msgname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msgname().data(), this->msgname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "nodeService.MsgPack.msgname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msgname(), target);
  }

  // optional .nodeService.MsgType msgtype = 4;
  if (this->msgtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msgtype(), target);
  }

  // optional uint32 sessionid = 5;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sessionid(), target);
  }

  // optional bytes pbdata = 6;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pbdata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nodeService.MsgPack)
  return target;
}

int MsgPack::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:nodeService.MsgPack)
  int total_size = 0;

  // optional string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  // optional string dest = 2;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  // optional string msgname = 3;
  if (this->msgname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msgname());
  }

  // optional .nodeService.MsgType msgtype = 4;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  // optional uint32 sessionid = 5;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessionid());
  }

  // optional bytes pbdata = 6;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgPack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nodeService.MsgPack)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgPack* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgPack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nodeService.MsgPack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nodeService.MsgPack)
    MergeFrom(*source);
  }
}

void MsgPack::MergeFrom(const MsgPack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nodeService.MsgPack)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.msgname().size() > 0) {

    msgname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgname_);
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
}

void MsgPack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nodeService.MsgPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPack::CopyFrom(const MsgPack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nodeService.MsgPack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPack::IsInitialized() const {

  return true;
}

void MsgPack::Swap(MsgPack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgPack::InternalSwap(MsgPack* other) {
  source_.Swap(&other->source_);
  dest_.Swap(&other->dest_);
  msgname_.Swap(&other->msgname_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(sessionid_, other->sessionid_);
  pbdata_.Swap(&other->pbdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgPack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPack_descriptor_;
  metadata.reflection = MsgPack_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgPack

// optional string source = 1;
void MsgPack::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgPack::source() const {
  // @@protoc_insertion_point(field_get:nodeService.MsgPack.source)
  return source_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_source(const ::std::string& value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeService.MsgPack.source)
}
 void MsgPack::set_source(const char* value) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeService.MsgPack.source)
}
 void MsgPack::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeService.MsgPack.source)
}
 ::std::string* MsgPack::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:nodeService.MsgPack.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgPack::release_source() {
  // @@protoc_insertion_point(field_release:nodeService.MsgPack.source)
  
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:nodeService.MsgPack.source)
}

// optional string dest = 2;
void MsgPack::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgPack::dest() const {
  // @@protoc_insertion_point(field_get:nodeService.MsgPack.dest)
  return dest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_dest(const ::std::string& value) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeService.MsgPack.dest)
}
 void MsgPack::set_dest(const char* value) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeService.MsgPack.dest)
}
 void MsgPack::set_dest(const char* value, size_t size) {
  
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeService.MsgPack.dest)
}
 ::std::string* MsgPack::mutable_dest() {
  
  // @@protoc_insertion_point(field_mutable:nodeService.MsgPack.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgPack::release_dest() {
  // @@protoc_insertion_point(field_release:nodeService.MsgPack.dest)
  
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:nodeService.MsgPack.dest)
}

// optional string msgname = 3;
void MsgPack::clear_msgname() {
  msgname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgPack::msgname() const {
  // @@protoc_insertion_point(field_get:nodeService.MsgPack.msgname)
  return msgname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_msgname(const ::std::string& value) {
  
  msgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeService.MsgPack.msgname)
}
 void MsgPack::set_msgname(const char* value) {
  
  msgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeService.MsgPack.msgname)
}
 void MsgPack::set_msgname(const char* value, size_t size) {
  
  msgname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeService.MsgPack.msgname)
}
 ::std::string* MsgPack::mutable_msgname() {
  
  // @@protoc_insertion_point(field_mutable:nodeService.MsgPack.msgname)
  return msgname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgPack::release_msgname() {
  // @@protoc_insertion_point(field_release:nodeService.MsgPack.msgname)
  
  return msgname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_allocated_msgname(::std::string* msgname) {
  if (msgname != NULL) {
    
  } else {
    
  }
  msgname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgname);
  // @@protoc_insertion_point(field_set_allocated:nodeService.MsgPack.msgname)
}

// optional .nodeService.MsgType msgtype = 4;
void MsgPack::clear_msgtype() {
  msgtype_ = 0;
}
 ::nodeService::MsgType MsgPack::msgtype() const {
  // @@protoc_insertion_point(field_get:nodeService.MsgPack.msgtype)
  return static_cast< ::nodeService::MsgType >(msgtype_);
}
 void MsgPack::set_msgtype(::nodeService::MsgType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:nodeService.MsgPack.msgtype)
}

// optional uint32 sessionid = 5;
void MsgPack::clear_sessionid() {
  sessionid_ = 0u;
}
 ::google::protobuf::uint32 MsgPack::sessionid() const {
  // @@protoc_insertion_point(field_get:nodeService.MsgPack.sessionid)
  return sessionid_;
}
 void MsgPack::set_sessionid(::google::protobuf::uint32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:nodeService.MsgPack.sessionid)
}

// optional bytes pbdata = 6;
void MsgPack::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgPack::pbdata() const {
  // @@protoc_insertion_point(field_get:nodeService.MsgPack.pbdata)
  return pbdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nodeService.MsgPack.pbdata)
}
 void MsgPack::set_pbdata(const char* value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nodeService.MsgPack.pbdata)
}
 void MsgPack::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nodeService.MsgPack.pbdata)
}
 ::std::string* MsgPack::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:nodeService.MsgPack.pbdata)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgPack::release_pbdata() {
  // @@protoc_insertion_point(field_release:nodeService.MsgPack.pbdata)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgPack::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != NULL) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:nodeService.MsgPack.pbdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nodeService

// @@protoc_insertion_point(global_scope)
